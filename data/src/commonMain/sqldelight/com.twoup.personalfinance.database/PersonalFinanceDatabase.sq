CREATE TABLE Wallet (
    id TEXT,
    amount INTEGER,
    description TEXT,
    name TEXT,
    walletGroup TEXT
);

CREATE TABLE PersonalFinanceDatabaseCategory (
      id TEXT NOT NULL ,
      name TEXT NOT NULL,
      categoryId TEXT NOT NULL,
      userId TEXT NOT NULL
);

insertWallet:
INSERT INTO Wallet(id, amount, description, name, walletGroup)
VALUES(?, ?, ?, ?,?);

removeAllWallet:
DELETE FROM Wallet;

selectAllWallet:
SELECT *
FROM Wallet;

getAllCategory:
SELECT *
FROM PersonalFinanceDatabaseCategory;

getCategoryById:
SELECT *
FROM PersonalFinanceDatabaseCategory
WHERE id = ?;

insertCategory:
INSERT INTO PersonalFinanceDatabaseCategory(id,name,categoryId, userId)
VALUES (?,?,?,?);

updateCategory:
UPDATE PersonalFinanceDatabaseCategory
SET id = ?, name = ?, categoryId =?, userId =?
WHERE id = ?;

deletCategoryById:
DELETE FROM PersonalFinanceDatabaseCategory
WHERE id =?;

-- Table for storing accounts
CREATE TABLE Accounts (
    account_id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_name TEXT NOT NULL,
    account_type TEXT NOT NULL,
    account_description TEXT NOT NULL,
    account_asset INTEGER DEFAULT 0,
    account_liabilities INTEGER DEFAULT 0
);

insertAccount:
INSERT INTO Accounts(account_name, account_type, account_description, account_asset, account_liabilities)
VALUES (?, ?, ?, ?, ?);

-- Sample inserts:
INSERT INTO Accounts(account_name, account_type, account_description, account_asset, account_liabilities)
VALUES ('Bank account', 'Flat money', 'none', 0, 0);

INSERT INTO Accounts(account_name, account_type, account_description, account_asset, account_liabilities)
VALUES ('Cash account', 'digital money', 'none', 0, 0);

INSERT INTO Accounts(account_name, account_type, account_description, account_asset, account_liabilities)
VALUES ('Debt account', 'Flat money', 'none', 0, 0);

updateAccountById:
UPDATE Accounts

SET account_name = ?, account_asset = ?, account_liabilities = ?, account_type = ?, account_description = ?, account_liabilities = ?
WHERE account_id = ?;

deleteAccountById:
DELETE FROM Accounts
WHERE account_id = ?;

getAllAccount:
SELECT * FROM Accounts;

getAccountById:
SELECT * FROM Accounts
WHERE account_id = ?;

deleteAllAccount:
DELETE FROM Accounts;

CREATE TABLE GroupAccount(
    group_id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_name TEXT NOT NULL
);

INSERT INTO GroupAccount(group_name) VALUES ('Cash');

INSERT INTO GroupAccount(group_name) VALUES ('Bank account');

INSERT INTO GroupAccount(group_name) VALUES ('Credit');

INSERT INTO GroupAccount(group_name) VALUES ('Debit card');

INSERT INTO GroupAccount(group_name) VALUES ('CD');

INSERT INTO GroupAccount(group_name) VALUES ('Invest');

INSERT INTO GroupAccount(group_name) VALUES ('Credit limit');

INSERT INTO GroupAccount(group_name) VALUES ('Loan');

INSERT INTO GroupAccount(group_name) VALUES ('Insurance');

INSERT INTO GroupAccount(group_name) VALUES ('Other');

-- Table for storing income categories
CREATE TABLE CategorieIncome (
    category_id INTEGER PRIMARY KEY AUTOINCREMENT,
    category_name TEXT NOT NULL
);

CREATE TABLE CategorieExpense (
    category_id INTEGER PRIMARY KEY AUTOINCREMENT,
    category_name TEXT NOT NULL
);

insertCategoryExpenses:
INSERT INTO CategorieExpense(category_name) VALUES (?);

INSERT INTO CategorieExpense(category_name) VALUES ('Food$Drink');

INSERT INTO CategorieExpense(category_name) VALUES ('Entertainment');

INSERT INTO CategorieExpense(category_name) VALUES ('Self growth');

INSERT INTO CategorieExpense(category_name) VALUES ('Transportation');

INSERT INTO CategorieExpense(category_name) VALUES ('Living');

INSERT INTO CategorieExpense(category_name) VALUES ('Beautify');

INSERT INTO CategorieExpense(category_name) VALUES ('Health');

INSERT INTO CategorieExpense(category_name) VALUES ('Education');

INSERT INTO CategorieExpense(category_name) VALUES ('Event');

INSERT INTO CategorieExpense(category_name) VALUES ('Other');

INSERT INTO CategorieExpense(category_name) VALUES ('food');

insertCategoryIncome:
INSERT INTO CategorieIncome(category_name) VALUES (?);

INSERT INTO CategorieIncome(category_name) VALUES ('salary');

INSERT INTO CategorieIncome(category_name) VALUES ('subsidy');

INSERT INTO CategorieIncome(category_name) VALUES ('pay overtime');

INSERT INTO CategorieIncome(category_name) VALUES ('bonus');

INSERT INTO CategorieIncome(category_name) VALUES ('other');

INSERT INTO Transactions (
    transaction_income, transaction_expenses, transaction_transfer,
    transaction_description, transaction_note,
    transaction_created, transaction_month, transaction_year,
    transaction_category, transaction_account,
    transaction_selectIndex, transaction_accountFrom, transaction_accountTo
) VALUES
(500, 100, 0, 'Salary', 'Direct deposit', 1707964800, 2, 2024, 'Income', 'Checking', 1, '', ''),
(200, 50, 0, 'Freelance work', 'Invoice #123', 1707964800, 2, 2024, 'Income', 'Savings', 2, '', ''),
(0, 150, 0, 'Groceries', 'Weekly food shopping', 1707964800, 2, 2024, 'Expenses', 'Checking', 3, '', ''),
(0, 200, 0, 'Online Courses', 'Learning new skills', 1707964800, 2, 2024, 'Expenses', 'Checking', 4, '', ''),
(0, 0, 300, 'Transfer to savings', 'Monthly savings', 1707964800, 2, 2024, 'Transfer', 'Savings', 5, 'Checking', 'Savings'),
(600, 0, 0, 'Bonus', 'Annual bonus', 1707964800, 2, 2024, 'Income', 'Checking', 6, '', ''),
(0, 75, 0, 'Utilities', 'Monthly bills', 1707964800, 2, 2024, 'Expenses', 'Checking', 7, '', ''),
(0, 0, 200, 'Transfer to investment', 'Investment fund', 1707964800, 2, 2024, 'Transfer', 'Investment', 8, 'Checking', 'Investment'),
(0, 120, 0, 'Dining Out', 'Dinner with friends', 1707964800, 2, 2024, 'Expenses', 'Checking', 9, '', ''),
(100, 0, 0, 'Gift', 'Birthday gift', 1707964800, 2, 2024, 'Income', 'Savings', 10, '', '');


updagteCategoryExpensesById:
UPDATE CategorieExpense
SET category_name = ?
WHERE category_id = ?;

updagteCategoryIncomeById:
UPDATE CategorieIncome
SET category_name = ?
WHERE category_id = ?;

deleteCategoryIncomeById:
DELETE FROM CategorieIncome
WHERE category_id = ?;

deleteCategoryExpensesById:
DELETE FROM CategorieExpense
WHERE category_id = ?;

deleteAllCategoryIncome:
DELETE FROM CategorieIncome;

deleteAllCategoryExpenses:
DELETE FROM CategorieExpense;

getAllCategoryIncome:
SELECT * FROM CategorieIncome;

getAllCategoryExpenses:
SELECT * FROM CategorieExpense;

getCategoryIncomeById:
SELECT * FROM CategorieIncome
WHERE category_id = ?;

getCategoryExpensesById:
SELECT * FROM CategorieExpense
WHERE category_id = ?;


-- Table for recording income transactions
CREATE TABLE Transactions (
    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    transaction_income INTEGER NOT NULL,
    transaction_expenses INTEGER NOT NULL,
    transaction_transfer INTEGER NOT NULL,
    transaction_description TEXT NOT NULL,
    transaction_note TEXT NOT NULL,
    transaction_created INTEGER NOT NULL,
    transaction_month INTEGER NOT NULL,
    transaction_year INTEGER NOT NULL,
    transaction_category TEXT NOT NULL,
    transaction_account TEXT NOT NULL,
    transaction_selectIndex INTEGER NOT NULL,
    transaction_accountFrom TEXT NOT NULL,
    transaction_accountTo TEXT NOT NULL
);

calculateTotalIncomeByDate:
SELECT SUM(transaction_income) FROM Transactions AS total_income WHERE transaction_created = ? AND transaction_income > 0;

calculateTotalExpensesByDate:
SELECT SUM(transaction_expenses) FROM Transactions AS total_expenses WHERE transaction_created = ? AND transaction_expenses > 0;


insertTransaction:
INSERT INTO Transactions(transaction_income, transaction_expenses, transaction_transfer, transaction_description, transaction_note, transaction_created,transaction_month,transaction_year, transaction_category, transaction_account, transaction_selectIndex, transaction_accountFrom, transaction_accountTo)
VALUES (?, ?, ?, ?, ?, ?, ?,?, ?, ?,?, ?, ?);

updateTransactionById:
UPDATE Transactions
SET transaction_income =?, transaction_expenses = ?, transaction_transfer = ?, transaction_description = ?, transaction_note = ?, transaction_created = ?,transaction_month =?,transaction_year =?, transaction_category = ?, transaction_account = ?, transaction_selectIndex = ?, transaction_accountFrom = ?, transaction_accountTo = ?
WHERE transaction_id = ?;

deleteTransactionById:
DELETE FROM Transactions
WHERE transaction_id = ?;

deleteAllTransaction:
DELETE FROM Transactions;

getAllTransaction:
SELECT * FROM Transactions;

getTransactionById:
SELECT * FROM Transactions
WHERE transaction_id = ?;

filterTransaction:
SELECT * FROM Transactions
WHERE transaction_month = ? AND transaction_year = ?;

filterTransactionByYear:
SELECT * FROM Transactions
WHERE transaction_year = ?;

searchTransaction:
SELECT * FROM Transactions
WHERE transaction_note = ? AND transaction_description =?;

-- -- Table for additional notes for transactions
CREATE TABLE notes (
    note_id INTEGER PRIMARY KEY AUTOINCREMENT,
    note_title TEXT NOT NULL,
    note_text TEXT NOT NULL,
    note_created INTEGER NOT NULL
);

insertNote:
INSERT INTO notes(note_title, note_text, note_created)
VALUES (?, ?,?);

updateNoteById:
UPDATE notes
SET note_text = ?
WHERE note_id = ?;

deleteNoteById:
DELETE FROM notes
WHERE note_id = ?;

deleteAllNote:
DELETE FROM notes;

getAllNote:
SELECT * FROM notes;

getNoteById:
SELECT * FROM notes
WHERE note_id = ?;

getAllInfoTransaction:
SELECT
    t.transaction_id,
    t.transaction_income AS transaction_income,
    t.transaction_expenses AS transaction_expenses,
    t.transaction_description AS transaction_description,
    t.transaction_created AS transaction_created,
    t.transaction_category AS transaction_category,
    c.category_name AS category_name,
    t.transaction_account AS transaction_account,
    a.account_name AS account_name,
    w.id AS wallet_id,
    w.amount AS wallet_amount,
    w.description AS wallet_description,
    w.name AS wallet_name,
    w.walletGroup AS wallet_group
FROM Transactions t
LEFT JOIN CategorieExpense c ON t.transaction_category = c.category_id
LEFT JOIN Accounts a ON t.transaction_account = a.account_id
LEFT JOIN Wallet w ON t.transaction_account = w.id;