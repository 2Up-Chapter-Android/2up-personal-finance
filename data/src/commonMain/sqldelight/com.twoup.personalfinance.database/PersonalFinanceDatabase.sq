CREATE TABLE Wallet (
    id TEXT,
    amount INTEGER,
    description TEXT,
    name TEXT,
    walletGroup TEXT
);

CREATE TABLE PersonalFinanceDatabaseCategory (
      id TEXT NOT NULL ,
      name TEXT NOT NULL,
      categoryId TEXT NOT NULL,
      userId TEXT NOT NULL
);

insertWallet:
INSERT INTO Wallet(id, amount, description, name, walletGroup)
VALUES(?, ?, ?, ?,?);

removeAllWallet:
DELETE FROM Wallet;

selectAllWallet:
SELECT *
FROM Wallet;

getAllCategory:
SELECT *
FROM PersonalFinanceDatabaseCategory;

getCategoryById:
SELECT *
FROM PersonalFinanceDatabaseCategory
WHERE id = ?;

insertCategory:
INSERT INTO PersonalFinanceDatabaseCategory(id,name,categoryId, userId)
VALUES (?,?,?,?);

updateCategory:
UPDATE PersonalFinanceDatabaseCategory
SET id = ?, name = ?, categoryId =?, userId =?
WHERE id = ?;

deletCategoryById:
DELETE FROM PersonalFinanceDatabaseCategory
WHERE id =?;


-- Table for storing accounts
CREATE TABLE Accounts (
    account_id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_name TEXT NOT NULL,
    account_type TEXT NOT NULL,
    description TEXT NOT NULL,
    income REAL DEFAULT 0,
    expense REAL DEFAULT 0
    --     transaction_id INTEGER NOT NULL,
--     FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id)
);

-- Table for storing income categories
CREATE TABLE Categories (
    category_id INTEGER PRIMARY KEY AUTOINCREMENT,
    category_name TEXT NOT NULL
--     transaction_id INTEGER NOT NULL,
--     FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id)
);

-- Table for storing income subcategories
-- CREATE TABLE SubCategories (
--     subCategory_id INTEGER PRIMARY KEY AUTOINCREMENT,
--     subCategory_name TEXT NOT NULL,
--     category_id INTEGER NOT NULL,
--     FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE CASCADE
-- );
-- b·ªè

-- Table for recording income transactions
CREATE TABLE Transactions (
    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL NOT NULL,
    description TEXT NOT NULL,
    created INTEGER NOT NULL,
    category TEXT NOT NULL,
    account TEXT NOT NULL
);

-- -- Table for additional notes for transactions
CREATE TABLE notes (
    note_id INTEGER PRIMARY KEY AUTOINCREMENT,
    note_text TEXT NOT NULL,
    created INTEGER NOT NULL
);

insertAccount:
INSERT INTO Accounts(account_name, account_type, description, income, expense)
VALUES (?, ?, ?, ?,?);

INSERT INTO Accounts (account_name, account_type, description, income, expense)
VALUES ('Bank account','Flat money','none',0,0);

INSERT INTO Accounts (account_name, account_type, description,  income, expense)
VALUES ('Case account','digital money','none',0,0);

INSERT INTO Accounts (account_name, account_type, description,  income, expense)
VALUES ('Debt account','Flat money','none',0,0);

-- insertSubCategory:
-- INSERT INTO SubCategories(subCategory_name, category_id)
-- VALUES(?,?);

insertCategoryItem:
INSERT INTO Categories(category_name)
VALUES (?);

INSERT INTO Categories(category_name)
VALUES ('Food$Drink');

INSERT INTO Categories(category_name)
VALUES ('Entertainment');

INSERT INTO Categories(category_name)
VALUES ('Self growth');

INSERT INTO Categories(category_name)
VALUES ('Transportation');

INSERT INTO Categories(category_name)
VALUES ('Living');

INSERT INTO Categories(category_name)
VALUES ('Beautify');

INSERT INTO Categories(category_name)
VALUES ('Health');

INSERT INTO Categories(category_name)
VALUES ('Education');

INSERT INTO Categories(category_name)
VALUES ('Event');

INSERT INTO Categories(category_name)
VALUES ('Other');
INSERT INTO Categories(category_name)
VALUES ('food');
insertTransaction:
INSERT INTO Transactions(amount, description, created, category, account)
VALUES (?, ?, ?,?,?);

insertNote:
INSERT INTO notes(note_text, created)
VALUES (?, ?);

updateAccountById:
UPDATE Accounts
SET account_name = ?, income = ?, expense =?
WHERE account_id = ?;

updagteCategoryById:
UPDATE Categories
SET category_name = ?
WHERE category_id = ?;

-- updateSubCategoryById:
-- UPDATE SubCategories
-- SET subCategory_name = ?
-- WHERE subCategory_id = ?;

updateTransactionById:
UPDATE Transactions
SET amount = ?, description = ?
WHERE transaction_id = ?;

updateNoteById:
UPDATE notes
SET note_text = ?
WHERE note_id = ?;

deleteAccountById:
DELETE FROM Accounts
WHERE account_id = ?;

deleteCategoryById:
DELETE FROM Categories
WHERE category_id = ?;

-- deleteSubCategoryById:
-- DELETE FROM SubCategories
-- WHERE subCategory_id = ?;

deleteTransactionById:
DELETE FROM Transactions
WHERE transaction_id = ?;

deleteNoteById:
DELETE FROM notes
WHERE note_id = ?;

deleteAllAccount:
DELETE FROM Accounts;

deleteAllCategory:
DELETE FROM Categories;

-- deleteAllSubCategory:
-- DELETE FROM SubCategories;

deleteTransaction:
DELETE FROM Transactions;

deleteAllNote:
DELETE FROM notes;

getAllAccount:
SELECT * FROM Accounts;

getAllCategoryItem:
SELECT * FROM Categories;

-- getAllSubCategory:kjh

getAllTransaction:
SELECT * FROM Transactions;

getAllNote:
SELECT * FROM notes;

getAllInfoTransaction:
SELECT
    t.transaction_id,
    t.amount AS transaction_amount,
    t.description AS transaction_description,
    t.created AS transaction_created,
    t.category AS transaction_category,
    c.category_name AS category_name,
    t.account AS transaction_account,
    a.account_name AS account_name,
    w.id AS wallet_id,
    w.amount AS wallet_amount,
    w.description AS wallet_description,
    w.name AS wallet_name,
    w.walletGroup AS wallet_group
FROM Transactions t
LEFT JOIN Categories c ON t.category = c.category_id
LEFT JOIN Accounts a ON t.account = a.account_id
LEFT JOIN Wallet w ON t.account = w.id;